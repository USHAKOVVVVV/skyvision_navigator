55.960076, 37.959420
import requests
import math
import os
from PIL import Image
import time

def correct_latlon_to_tile(lat, lon, zoom):
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ç–∞–π–ª—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç"""
    n = 2.0 ** zoom
    x = int((lon + 180.0) / 360.0 * n)
    lat_rad = math.radians(lat)
    y_standard = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n)
    y_correct = y_standard + 231  # –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
    return x, y_correct

def download_tile(x, y, zoom):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∞–π–ª"""
    url = f"https://core-sat.maps.yandex.net/tiles?l=sat&x={x}&y={y}&z={zoom}"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Referer': 'https://yandex.ru/maps/'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200 and len(response.content) > 5000:
            return response.content
    except:
        pass
    return None

def create_output_filename(lat1, lon1, lat2, lon2, zoom):
    """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output_img –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('output_img', exist_ok=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    coords_str = f"map_{lat1:.6f}_{lon1:.6f}_to_{lat2:.6f}_{lon2:.6f}"
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ 'd' –∏ –º–∏–Ω—É—Å—ã –Ω–∞ 'm'
    coords_str = coords_str.replace('.', 'd').replace('-', 'm')
    filename = f"{coords_str}.jpg"
    return os.path.join('output_img', filename)

def download_and_stitch_area(lat1, lon1, lat2, lon2, zoom):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–∫–ª–µ–∏–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
    print("\n=== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –û–ë–õ–ê–°–¢–ò ===")
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    output_file = create_output_filename(lat1, lon1, lat2, lon2, zoom)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    south = min(lat1, lat2)
    north = max(lat1, lat2)
    west = min(lon1, lon2)
    east = max(lon1, lon2)
    
    print(f"–û–±–ª–∞—Å—Ç—å:")
    print(f"  –Æ–≥–æ-–∑–∞–ø–∞–¥: {south:.6f}, {west:.6f}")
    print(f"  –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫: {north:.6f}, {east:.6f}")
    print(f"  –§–∞–π–ª: {os.path.basename(output_file)}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–ª—ã –≤ —Ç–∞–π–ª—ã
    x_nw, y_nw = correct_latlon_to_tile(north, west, zoom)
    x_se, y_se = correct_latlon_to_tile(south, east, zoom)
    
    print(f"–¢–∞–π–ª—ã —É–≥–ª–æ–≤:")
    print(f"  –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥: {x_nw}, {y_nw}")
    print(f"  –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫: {x_se}, {y_se}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–∞–π–ª–æ–≤
    min_x, max_x = min(x_nw, x_se), max(x_nw, x_se)
    min_y, max_y = min(y_nw, y_se), max(y_nw, y_se)
    
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ç–∞–π–ª–æ–≤:")
    print(f"  X: {min_x} - {max_x}")
    print(f"  Y: {min_y} - {max_y}")
    total_tiles = (max_x - min_x + 1) * (max_y - min_y + 1)
    print(f"  –í—Å–µ–≥–æ —Ç–∞–π–ª–æ–≤: {total_tiles}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    os.makedirs("temp_tiles", exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–∞–π–ª—ã
    downloaded = 0
    print("\n–°–∫–∞—á–∏–≤–∞–µ–º —Ç–∞–π–ª—ã...")
    
    for x in range(min_x, max_x + 1):
        for y in range(min_y, max_y + 1):
            tile_data = download_tile(x, y, zoom)
            if tile_data:
                filename = f"temp_tiles/tile_{x}_{y}.jpg"
                with open(filename, 'wb') as f:
                    f.write(tile_data)
                downloaded += 1
            print(f"–°–∫–∞—á–∞–Ω–æ: {downloaded}/{total_tiles}", end='\r')
            time.sleep(0.05)
    
    print(f"\n–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {downloaded}/{total_tiles} —Ç–∞–π–ª–æ–≤")
    
    # –°–∫–ª–µ–∏–≤–∞–µ–º —Ç–∞–π–ª—ã
    if downloaded > 0:
        print("–°–∫–ª–µ–∏–≤–∞–µ–º —Ç–∞–π–ª—ã...")
        success = stitch_tiles(min_x, max_x, min_y, max_y, output_file)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        cleanup_temp_files(min_x, max_x, min_y, max_y)
        
        return success, output_file
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–ª–∞!")
        return False, output_file

def stitch_tiles(min_x, max_x, min_y, max_y, output_file):
    """–°–∫–ª–µ–∏–≤–∞–µ—Ç —Ç–∞–π–ª—ã –≤ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    tile_size = 256
    width = (max_x - min_x + 1) * tile_size
    height = (max_y - min_y + 1) * tile_size
    
    print(f"–°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π...")
    
    result = Image.new('RGB', (width, height))
    
    for x in range(min_x, max_x + 1):
        for y in range(min_y, max_y + 1):
            tile_path = f"temp_tiles/tile_{x}_{y}.jpg"
            if os.path.exists(tile_path):
                try:
                    tile = Image.open(tile_path)
                    pos_x = (x - min_x) * tile_size
                    pos_y = (y - min_y) * tile_size
                    result.paste(tile, (pos_x, pos_y))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏ —Ç–∞–π–ª–∞ {x},{y}: {e}")
    
    result.save(output_file, quality=95)
    print(f"‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")
    return True

def cleanup_temp_files(min_x, max_x, min_y, max_y):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    for x in range(min_x, max_x + 1):
        for y in range(min_y, max_y + 1):
            tile_path = f"temp_tiles/tile_{x}_{y}.jpg"
            if os.path.exists(tile_path):
                os.remove(tile_path)
    try:
        os.rmdir("temp_tiles")
    except:
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("=== –°–ö–ê–ß–ò–í–ê–¢–ï–õ–¨ –ö–ê–†–¢ –Ø–ù–î–ï–ö–° ===")
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏:")
    
    try:
        print("\nüìç –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª (—é–≥–æ-–∑–∞–ø–∞–¥):")
        coord_input_1 = input("  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): ")
        lat1, lon1 = map(float, coord_input_1.split(','))
       
        
        print("\nüìç –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª (—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫):")
        coord_input_2 = input("  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): ")
        lat2, lon2 = map(float, coord_input_2.split(','))
        
        zoom = 18       
        print(f"\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        success, filename = download_and_stitch_area(lat1, lon1, lat2, lon2, zoom)
        
        if success:
            print(f"\nüéâ –£–°–ü–ï–•! –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫:")
            print(f"üìÅ {filename}")
            print(f"üìä –ò–º—è —Ñ–∞–π–ª–∞: {os.path.basename(filename)}")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É")
            
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    main()