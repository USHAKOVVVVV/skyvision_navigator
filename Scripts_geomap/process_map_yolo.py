import cv2
import numpy as np
import json
import os
from ultralytics import YOLO
from datetime import datetime
from tqdm import tqdm

def extract_coords_from_filename(filename):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    # –ü—Ä–∏–º–µ—Ä: map_55d954635_37d942221_to_55d962248_37d953572_z18.jpg
    try:
        base_name = os.path.splitext(filename)[0]  # —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        parts = base_name.split('_')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∑–∞–º–µ–Ω—è–µ–º 'd' –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ç–æ—á–∫–∏
        lat1 = float(parts[1].replace('d', '.'))
        lon1 = float(parts[2].replace('d', '.'))
        lat2 = float(parts[4].replace('d', '.'))
        lon2 = float(parts[5].replace('d', '.'))
        
        # –û–ü–†–ï–î–ï–õ–Ø–ï–ú –°–ï–í–ï–†–ù–£–Æ –ò –Æ–ñ–ù–£–Æ –ì–†–ê–ù–ò–¶–´
        # –®–∏—Ä–æ—Ç–∞: —Å–µ–≤–µ—Ä–Ω–∞—è –±–æ–ª—å—à–µ, —é–∂–Ω–∞—è –º–µ–Ω—å—à–µ
        north_lat = max(lat1, lat2)
        south_lat = min(lat1, lat2)
        
        # –î–æ–ª–≥–æ—Ç–∞: –∑–∞–ø–∞–¥–Ω–∞—è –º–µ–Ω—å—à–µ, –≤–æ—Å—Ç–æ—á–Ω–∞—è –±–æ–ª—å—à–µ  
        west_lon = min(lon1, lon2)
        east_lon = max(lon1, lon2)
        
        top_left_gps = (north_lat, west_lon)     # –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ (—Å–µ–≤–µ—Ä–Ω–∞—è —à–∏—Ä–æ—Ç–∞, –∑–∞–ø–∞–¥–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞)
        bottom_right_gps = (south_lat, east_lon) # –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ (—é–∂–Ω–∞—è —à–∏—Ä–æ—Ç–∞, –≤–æ—Å—Ç–æ—á–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞)
        
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:")
        print(f"   –¢–æ—á–∫–∞ 1: {lat1}, {lon1}")
        print(f"   –¢–æ—á–∫–∞ 2: {lat2}, {lon2}")
        print(f"   –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥ (top_left): {top_left_gps}")
        print(f"   –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫ (bottom_right): {bottom_right_gps}")
        
        return top_left_gps, bottom_right_gps
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {e}")
        return None, None


def calculate_centroid(mask):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –±–∏–Ω–∞—Ä–Ω–æ–π –º–∞—Å–∫–∏"""
    try:
        moments = cv2.moments(mask)
        if moments["m00"] != 0:
            centroid_x = int(moments["m10"] / moments["m00"])
            centroid_y = int(moments["m01"] / moments["m00"])
            return (centroid_x, centroid_y)
        else:
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            if contours:
                x, y, w, h = cv2.boundingRect(contours[0])
                return (x + w//2, y + h//2)
            else:
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞: {e}")
        return None

def pixel_to_gps(pixel_coords, image_width, image_height, top_left_gps, bottom_right_gps):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
    x_px, y_px = pixel_coords
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –î–ò–ê–ü–ê–ó–û–ù–û–í
    lat_range = top_left_gps[0] - bottom_right_gps[0]  # —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ —à–∏—Ä–æ—Ç–µ
    lon_range = bottom_right_gps[1] - top_left_gps[1]  # —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ –¥–æ–ª–≥–æ—Ç–µ
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (0-1)
    x_norm = x_px / (image_width - 1)  # –¥–µ–ª–∏–º –Ω–∞ (width-1) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    y_norm = y_px / (image_height - 1)  # –¥–µ–ª–∏–º –Ω–∞ (height-1) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    
    # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–Ø:
    # –®–∏—Ä–æ—Ç–∞: –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –∫ –Ω–∏–∂–Ω–µ–π (y —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏–∑)
    latitude = top_left_gps[0] - (y_norm * lat_range)
    # –î–æ–ª–≥–æ—Ç–∞: –æ—Ç –ª–µ–≤–æ–π –∫ –ø—Ä–∞–≤–æ–π (x —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ)  
    longitude = top_left_gps[1] + (x_norm * lon_range)
    
    return (round(latitude, 8), round(longitude, 8))  # —É–≤–µ–ª–∏—á–∏–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 8 –∑–Ω–∞–∫–æ–≤

def process_map_with_yolo_tiled(model_path, image_path, output_json_path, output_viz_path, tile_size=640, overlap=64, conf=0.3):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã YOLO —Å —Ç–∞–π–ª–∏–Ω–≥–æ–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    top_left_gps, bottom_right_gps = extract_coords_from_filename(os.path.basename(image_path))
    
    if not top_left_gps:
        return
    
    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: –°-–ó {top_left_gps}, –Æ-–í {bottom_right_gps}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å YOLO...")
    model = YOLO(model_path)
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    print(f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
    original_image = cv2.imread(image_path)
    if original_image is None:
        print("‚ùå –ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return
        
    h, w = original_image.shape[:2]
    print(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {w}x{h}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    visualization_image = original_image.copy()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    centroids_data = {
        "metadata": {
            "source_image": image_path,
            "image_size": {"width": w, "height": h},
            "gps_bounds": {
                "top_left": list(top_left_gps),
                "bottom_right": list(bottom_right_gps)
            },
            "processing_date": datetime.now().isoformat(),
            "model_used": model_path,
            "processing_params": {
                "tile_size": tile_size,
                "overlap": overlap,
                "confidence_threshold": conf
            }
        },
        "objects": []
    }
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ö–û–õ–ò–ß–ï–°–¢–í–ê –¢–ê–ô–õ–û–í
    x_tiles = 0
    y_tiles = 0
    tile_positions = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–∞–π–ª–æ–≤
    for y in range(0, h, tile_size - overlap):
        for x in range(0, w, tile_size - overlap):
            x1 = x
            y1 = y
            x2 = min(x + tile_size, w)
            y2 = min(y + tile_size, h)
            
            # –£–ë–ò–†–ê–ï–ú –£–°–õ–û–í–ò–ï –ü–†–û–ü–£–°–ö–ê - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Ç–∞–π–ª—ã
            # –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∞—è
            tile_positions.append((x1, y1, x2, y2))
    
    total_tiles = len(tile_positions)
    
    print(f"üß© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤: {total_tiles}")
    print(f"üî≤ –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞: {tile_size}x{tile_size}")
    print(f"üîÑ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap} –ø–∏–∫—Å–µ–ª–µ–π")
    
    processed_tiles = 0
    object_count = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–ª
    print("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–ª–æ–≤...")
    for x1, y1, x2, y2 in tqdm(tile_positions, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–ª–æ–≤"):
        # –í—ã—Ä–µ–∑–∞–µ–º —Ç–∞–π–ª (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –º–∞–ª–µ–Ω—å–∫–∏–π)
        tile = original_image[y1:y2, x1:x2]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–ª –º–æ–¥–µ–ª—å—é
        results = model(tile, conf=conf, verbose=False)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–ª–∞
        for r in results:
            if r.masks is not None and len(r.masks) > 0:
                for i, mask in enumerate(r.masks.data):
                    if i < len(r.boxes.cls):
                        class_id = int(r.boxes.cls[i])
                        confidence = float(r.boxes.conf[i])
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫—É
                        mask_np = mask.cpu().numpy()
                        mask_resized = cv2.resize(mask_np, (x2-x1, y2-y1))
                        mask_binary = (mask_resized > 0.5).astype(np.uint8) * 255
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥
                        centroid = calculate_centroid(mask_binary)
                        
                        if centroid:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            global_centroid_px = (x1 + centroid[0], y1 + centroid[1])
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GPS
                            gps_coords = pixel_to_gps(global_centroid_px, w, h, top_left_gps, bottom_right_gps)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            object_data = {
                                "class_id": class_id,
                                "confidence": confidence,
                                "gps_coordinates": {
                                    "latitude": gps_coords[0],
                                    "longitude": gps_coords[1]
                                }
                            }
                            centroids_data["objects"].append(object_data)
                            object_count += 1
            
            # –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø: —Ä–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            if hasattr(r, 'plot') and r.boxes is not None:
                plotted_tile = r.plot()  # –ø–æ–ª—É—á–∞–µ–º —Ç–∞–π–ª —Å –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∞–π–ª –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                visualization_image[y1:y2, x1:x2] = plotted_tile
        
        processed_tiles += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
    cv2.imwrite(output_viz_path, visualization_image)
    print(f"üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_viz_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    with open(output_json_path, 'w', encoding='utf-8') as f:
        json.dump(centroids_data, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∞–π–ª–æ–≤: {processed_tiles}/{total_tiles}")
    print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {object_count}")
    print(f"   JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_json_path}")
    print(f"   –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_viz_path}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
    if object_count > 0:
        class_counts = {}
        for obj in centroids_data["objects"]:
            class_id = obj["class_id"]
            class_counts[class_id] = class_counts.get(class_id, 0) + 1
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
        for class_id, count in class_counts.items():
            class_name = model.names[class_id]
            print(f"   - {class_name}: {count} –æ–±—ä–µ–∫—Ç–æ–≤")
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    MODEL_PATH = '../runs/segment/yolov8n_gpu_simple_1/weights/best.pt'  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏
    IMAGE_PATH = "output_img/map_55d948091_37d941703_to_55d967844_37d996474.jpg"  # –∫–∞—Ä—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ maps
    base_name = os.path.splitext(os.path.basename(IMAGE_PATH))[0].replace('map_', '')

# –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    OUTPUT_JSON = os.path.join("output_json", f"json_{base_name}.json")
    OUTPUT_POLYGONS = os.path.join("output_yolo_img", f"polygons_{base_name}.jpg")
    

     # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–π–ª–∏–Ω–≥–∞
    TILE_SIZE = 640
    OVERLAP = 10
    CONFIDENCE = 0.25
    
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"   JSON: {OUTPUT_JSON}")
    print(f"   Polygons: {OUTPUT_POLYGONS}")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YOLO...")
    process_map_with_yolo_tiled(
        MODEL_PATH, 
        IMAGE_PATH, 
        OUTPUT_JSON,
        OUTPUT_POLYGONS,
        tile_size=TILE_SIZE,
        overlap=OVERLAP,
        conf=CONFIDENCE
    )